<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习-线性回归</title>
      <link href="/posts/19883263.html"/>
      <url>/posts/19883263.html</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习-线性回归"><a href="#机器学习-线性回归" class="headerlink" title="机器学习-线性回归"></a>机器学习-线性回归</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天要说一下机器学习中大多数书籍第一个讲的（有的可能是KNN）模型-线性回归。说起线性回归，首先要介绍一下机器学习中的两个常见的问题：回归任务和分类任务。那什么是回归任务和分类任务呢？简单的来说，在监督学习中（也就是有标签的数据中），标签值为连续值时是回归任务，标志值是离散值时是分类任务。而线性回归模型就是处理回归任务的最基础的模型。</p><h2 id="形式"><a href="#形式" class="headerlink" title="形式"></a>形式</h2><p>在只有一个变量的情况下，线性回归可以用方程：$y = ax+b$表示。而如果有多个变量，也就是n元线性回归的形式如下：</p><center> $h_\theta(x) = \theta_0 + \theta_1x_1 + \theta_2x_2 + \cdots$ <br><br> </center ><center> $h_\theta(x) = \sum^n_{i=0}{\theta_ix_i} = {\theta^Tx}$<br><br> </center >在这里我们将截断$b$用$\theta_0$代替，同时数据集X也需要添加一列1用于与$\theta_0$相乘，表示$+b$。最后写成矩阵的形式就是$\theta$的转置乘以x。其中如果数据集有n个特征，则$\theta$就是$n+1$维的向量并非矩阵，其中包括截断$b$。<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>线性回归的目的就是求解出合适的$\theta$，在一元的情况下拟合出一条直线（多元情况下是平面或者曲面），可以近似的代表各个数据样本的标签值。所以最好的直线要距离各个样本点都很接近，而如何求出这条直线就是本篇文章重点要将的内容。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_lr_compare.webp" alt="图1"></p><h2 id="最小二乘法"><a href="#最小二乘法" class="headerlink" title="最小二乘法"></a>最小二乘法</h2><p>求解线性回归模型的方法叫做最小二乘法，最小二乘法的核心就是保证所有数据偏差的平方和最小。它的具体形式是：</p><center> $J(\theta) = {1\over2}\sum^m_{i=1}(h_\theta(x^{(i)}) - y^{(i)})^2$ <br><br> </center >其中$h_\theta(x^{(i)})$代表每个样本通过我们模型的预测值，$y^{(i)}$代表每个样本标签的真实值，$m$为样本个数。因为模型预测值和真实值间存在误差$e$，可以写作：<center> $y^{(i)} = {\theta^Tx^{(i)} + \epsilon^{(i)}}$ <br><br> </center >根据中心极限定理，$e^{(i)}$是独立同分布的(IID)，服从均值为0，方差为某定值$σ$的平方的正太分布。具体推导过程如下：<p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_lr_zuixiaoercheng.webp" alt="图2"></p><h2 id="求解最小二乘法"><a href="#求解最小二乘法" class="headerlink" title="求解最小二乘法"></a>求解最小二乘法</h2><p>我们要求得就是当$\theta$取某个值时使$J(\theta)$最小，求解最小二乘法的方法一般有两种方法:矩阵式和梯度下降法。</p><h3 id="矩阵式求解"><a href="#矩阵式求解" class="headerlink" title="矩阵式求解"></a>矩阵式求解</h3><p>当我们的数据集含有m个样本，每个样本有n个特征时，数据x可以写成$m\cdot(n+1)$维的矩阵（$+1$是添加一列1，用于与截断$b$相乘），$\theta$则为$n+1$维的列向量（$+1$是截断b），y为m维的列向量代表每m个样本结果的预测值。则矩阵式的推导如下所示：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_lr_zuixiaoercheng_qiujie_juzhen.webp" alt="图3"></p><p>因为$X^TX$为方阵，如果$X^TX$是可逆的，则参数$\theta$得解析式可以写成：</p><center> $\theta = (X^TX)^{-1}X^Ty$ <br><br> </center >如果$X$的特征数n不是很大，通常情况下$X^TX$是可以求逆的，但是如果n非常大，$X^TX$不可逆，则用梯度下降法求解参数$\theta$的值。<h3 id="梯度下降法求解（GD）"><a href="#梯度下降法求解（GD）" class="headerlink" title="梯度下降法求解（GD）"></a>梯度下降法求解（GD）</h3><p>在一元函数中叫做求导，在多元函数中就叫做求梯度。梯度下降是一个最优化算法，通俗的来讲也就是沿着梯度下降的方向来求出一个函数的极小值。比如一元函数中，加速度减少的方向，总会找到一个点使速度达到最小。通常情况下，数据不可能完全符合我们的要求，所以很难用矩阵去求解，所以机器学习就应该用学习的方法，因此我们采用梯度下降，不断迭代，沿着梯度下降的方向来移动，求出极小值。梯度下降法包括批量梯度下降法和随机梯度下降法（SGD）以及二者的结合mini批量下降法（通常与SGD认为是同一种，常用于深度学习中）。</p><p>梯度下降法的一般过程如下：</p><ol><li>初始化$\theta$（随机）</li><li>求$J(\theta)$对$\theta$的偏导：</li></ol><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_lr_zuixiaoercheng_gd.webp" alt="图4"></p><ol start="3"><li><p>更新$\theta$</p><center> $\theta = \theta - \alpha \cdot {\partial J(\theta)\over{\partial \theta}}$ <br><br> </center ></li></ol><p>其中$\alpha$为学习率，调节学习率这个超参数也是建模中的一个重要内容。因为$J(\theta)$是凸函数，所以GD求出的最优解是全局最优解。</p><p>批量梯度下降法是求出整个数据集的梯度，再去更新$\theta$ ，所以每次迭代都是在求全局最优解。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_lr_gd_1.webp" alt="图5"></p><p>而随机梯度下降法是求一个样本的梯度后就去跟新$\theta$，所以每次迭代都是求局部最优解，但是总是朝着全局最优解前进，最后总会到达全局最优解。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_lr_gd_2.webp" alt="图6"></p><h2 id="其他回归模型"><a href="#其他回归模型" class="headerlink" title="其他回归模型"></a>其他回归模型</h2><p>在机器学习中，有时为了防止模型太复杂容易过拟合，通常会在模型上加入正则项，抑制模型复杂度，防止过拟合。在线性回归中有两种常用的正则，一个是$L1$正则，一个是$L2$正则，加入$L1$正则的称为$Lasso$回归，加入$L2$正则的为$Ridge$回归也叫岭回归。</p><h3 id="Lasso回归"><a href="#Lasso回归" class="headerlink" title="Lasso回归"></a>Lasso回归</h3><center> $J({\vec\theta}) = {1\over2}\sum^m_{i=1}(h_{\vec\theta}(x^{(i)}) - y^{(i)}) + \lambda\sum^n_{j=1}{|\theta_j|}$ <br><br> </center><h3 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h3><center> $J({\vec\theta}) = {1\over2}\sum^m_{i=1}(h_{\vec\theta}(x^{(i)}) - y^{(i)}) + \lambda\sum^n_{j=1}{\theta_j^2}$ <br><br> </center><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>下图是个人实现代码结果与真实值对比图：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_lr_compare_result.webp" alt="图7"></p><p>详细代码可参考<a href="https://github.com/hiyoung123/ML" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 线性回归 </tag>
            
            <tag> 岭回归 </tag>
            
            <tag> Lasso回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习-Logistic回归</title>
      <link href="/posts/c237bc03.html"/>
      <url>/posts/c237bc03.html</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习-Logistic回归"><a href="#机器学习-Logistic回归" class="headerlink" title="机器学习-Logistic回归"></a>机器学习-Logistic回归</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Logistic回归是机器学习中最常用最经典的分类方法之一，有的人称为逻辑回归或逻辑斯蒂回归。虽然它称为回归模型，但是却处理的是分类问题，这主要是因为它的本质是一个线性模型加上一个映射函数sigmoid，将线性模型得到的连续结果映射到离散型上。它常用于二分类问题，在多分类问题的推广叫做softmax。 </p><h2 id="Logisitc回归"><a href="#Logisitc回归" class="headerlink" title="Logisitc回归"></a>Logisitc回归</h2><p>由于Logistic回归是将线性模型的输出$ \theta x+b$经过$f(z)$数处理后，映射到离散值上形成分类问题，所以我们可以假设分类值$y=\{0，1\}$，所以Logistic回归模型可以写成：$h(x)=f(θx+b) $，也就是当$ \theta x+b$的值大于0时$h(x)=+1$，当$θx+b$的值小于0时$h(x)=-1$。但是这样的$f(z)$函数称为单位阶跃函数，但是它的数学性质不好，不连续也不方便求导，所以我们使用它的替代函数sigmoid函数也叫s型函数，我们用$g(x)$表示。这样线性模型的输出经过sigmoid的映射就变成了求出样本属于哪一类别的概率，即$θx+b&gt;0$的话，那么样本属于分类1的概率大一点，如果$θx+b&lt;0$的话就是样本属于1的概率小属于类别0的概率大一些。图1是单位阶跃函数（红线）与sigmoid函数（黑线）。 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_ml_logic_sigmoid.webp" alt="图1"></p><p>sigmoid的函数表达式为： </p> <center> $y={1\over1+e^{-z}}$ <br><br> </center ><p>其中z在Logistic回归中就是$θx+b$。那么为什么要用sigmoid函数呢？ </p><h2 id="Sigmoid函数"><a href="#Sigmoid函数" class="headerlink" title="Sigmoid函数"></a>Sigmoid函数</h2><p>从概率的角度看Logistic回归，如果将样本分为正类的概率看成$h(x)$，那么分为负类的概率就是$1-h(x)$，则Logistic回归模型的概率表达式符合$0-1$分布： </p><center> $P(y=1|x;θ) = h_θ(x)$ <br><br> </center ><center> $P(y=0|x;θ) = 1 - h_θ(x)$ <br><br> </center ><p>对上式结合就是Logistic回归的概率分布函数，也就是从概率角度的目标函数： </p><center> $P(y|x;θ) = (h_θ(x))^y(1 - h_θ(x))^{1-y}$  <br><br> </center ><p>我们对该式进行变换，可以得到指数族分布，最后可以得出函数$h(x)$就是sigmoid函数。以下是推导过程： </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_logist_sigmoid_process.webp" alt="图2"></p><p>其中图2中的p是图4中的$h(x)$，而图2的z是线性模型的输出$θx+b$。这样从指数族分布就可以推出sigmoid函数。换一个思路，我们将一个事件发生的概率$p$与其不发生的概率$1-p$的比值叫做几率，对其取对数后称为对数几率（logit）：</p><center> $log{p\over{1-p}}$ <br><br> </center ><p>令它等于线性函数θx+b，最后也可以推出$p$就是sigmoid函数，也就是图2的后半段，这样说明了sigmoid函数的值是概率值。另外，如果我们不让对数几率函数等于线性函数，让他等于其他的函数呢？这也是可以的，只不过是sigmoid函数中$z$的表达方式改变而已。 </p><h2 id="求解Logistic回归模型参数"><a href="#求解Logistic回归模型参数" class="headerlink" title="求解Logistic回归模型参数"></a>求解Logistic回归模型参数</h2><p> 我们重新整理一下Logistic回归的目标函数，他的最终形式为： </p><center> $h_θ(x) = g(θ^Tx) = {1\over{1 + e^{-θ^Tx}}}$ <br><br> </center ><p>因为这是一个概率问题，所以我们可以使用极大似然估计的方式求解Logistic回归的参数$θ$。以下是求导过程： </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_loggist_process.webp" alt="图3"></p><p> 其中$g()$函数是sigmoid函数，它的导数为： </p><center> $g\prime(x) = ({1\over{1 + e^{-x}}})\prime= {e^{-x}\over(1 + e^{-x})^2}$ <br><br> </center ><center> $= {1\over{1 + e^{-x}}}\cdot{e^{-x}\over{1 + e^{-x}}} = {1\over{1 + e^{-x}}}\cdot(1 - {1\over{1 + e^{-x}}})$ <br><br> </center ><center> $= {g(x)\cdot(1 - g(x))}$ <br><br> </center ><p>这样图3得到的结果就是关于$θ$的梯度，我们通过梯度提升算法（因为目标函数是最大似然估计，求极大值所以用梯度上升，如果想用梯度下降，可以对似然函数取负就是求极小值）更新$θ$，最后就求出Logistic回归模型的参数$θ$，这与线性回归方法相同（有没有发现他们的更新梯度的目标函数也相同）。 </p><center> $\theta_j:= \theta_j +  \alpha (y^{(i)} - h_\theta(x^{(i)}))x_j^{(i)}$ <br><br> </center ><p>以上就是Logistic回归模型的建立与参数估计过程，下面我们要说一下他在多分类问题中的推广—–softmax回归。 </p><h2 id="Softmax函数"><a href="#Softmax函数" class="headerlink" title="Softmax函数"></a>Softmax函数</h2><p>Softmax与Logistic回归的主要区别就是，Logistic处理二分类问题，只有一组权重参数$θ$。而softmax处理多分类问题，如果有k个类别，那么Softmax就有k组权值参数。每组权值对应一种分类，通过k组权值求解出样本数据对应每个类别的概率，最后取概率最大的类别作为该数据的分类结果。它的概率函数为： </p><center> $p(c=k|x;\theta) = {exp(\theta^T_kx)\over{\sum^k_{I=1}exp(\theta^T_ix)}},k = 1,2,3\cdots$ <br><br> </center ><p>Softmax经常用于神经网络的最后一层，用于对神经网络已经处理好的特征进行分类。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人实现了一个二分类的逻辑回归，并与sklearn中的logistic回归做对比：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_logist_compare_result.webp" alt="图4"></p><p>数据只使用了鸢尾花数据的0/1两个类别，由于本代码实现的比较简单，只能处理类别为0/1的数据，有兴趣的朋友可以自己做补充，本代码只做参考。 </p><p>详细代码可参考<a href="https://github.com/hiyoung123/ML" target="_blank" rel="noopener">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 逻辑回归 </tag>
            
            <tag> Logistic </tag>
            
            <tag> Sigmoid </tag>
            
            <tag> Softmax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压缩数据</title>
      <link href="/posts/4b093d11.html"/>
      <url>/posts/4b093d11.html</url>
      
        <content type="html"><![CDATA[<h1 id="压缩数据"><a href="#压缩数据" class="headerlink" title="压缩数据"></a>压缩数据</h1><p>压缩数据的原因主要有两点：节省保存信息所需的空间和节省传输信息所需的时间。我们将学习的算法之所以能够节省空间，是因为大多数数据文件都有很大的冗余。</p><p>我们将会讨论广泛应用的一种初级算法和两种高级算法。这些算法的压缩效果可能不同，取决于输入的特征。文本数据一般能节省 20% ~ 50% 的空间，某些情况下能够达到 50% ~ 90%。</p><blockquote><p>本文提到的性能（对于数据压缩），性能指代的是算法的压缩率，也会考虑压缩用时。</p></blockquote><h2 id="基础模型"><a href="#基础模型" class="headerlink" title="基础模型"></a>基础模型</h2><p>数据压缩的基础模型主要由两部分组成，两者都是一个能读写比特流的黑盒子：</p><ul><li>压缩盒：能够将一个比特流B转化为压缩后的版本C(B)。</li><li>展开盒：能够将C(B)转化回B。</li></ul><p>如果使用|B|表示比特流中比特的数量的话，我们感兴趣的是将|C(B)|/|B|最小化，这个值被称为压缩率。</p><p>待添加图片</p><p>这种模型叫做无损压缩模型－保证不丢失任何信息，即压缩和展开之后的比特流必须和原始的比特流完全相同。许多种类型的文件都会使用无损压缩，    如果数值数据或者可执行代码。对于某些类型的文件，如图像视频和音乐，有损压缩也是能接受的。此时解释器产生的输出只是与原输入的文件近似。有损压缩算法的评价标准不仅是压缩率，还包括主管的质量感受。</p><h2 id="压缩的局限"><a href="#压缩的局限" class="headerlink" title="压缩的局限"></a>压缩的局限</h2><h3 id="通用数据压缩"><a href="#通用数据压缩" class="headerlink" title="通用数据压缩"></a>通用数据压缩</h3><p>通用性的数据压缩算法是指一个能够缩小任意比特流的算法。但是这样的算法是不存在的：</p><ul><li><p>反证法</p><p>假设存在通用压缩算法，那么说明可以用它压缩它自己的输出，从而得到一个更短的比特流，循环直到比特流的长度为0，显然是错误的。</p></li><li><p>统计法</p><p>后续讲解</p></li></ul><p>根据统计法可以得出，对于任意数据压缩算法，将长度1000位的随机比特流压缩为一半的概率最多为$1/2^{500}$</p><h3 id="不可判定性"><a href="#不可判定性" class="headerlink" title="不可判定性"></a>不可判定性</h3><blockquote><p>压缩一个文件最好的办法就是找出创造这些数据的程序。</p></blockquote><p>可以证明最优数据压缩（找到能够产生给定字符串的最短程序）是一个不可能判定的问题：我们不但不可能找到能够压缩任意比特流的算法，也不可能找到最佳的压缩算法。</p><p>这些局限性所带来的实际影响要求无损压缩算法必须尽量利用被压缩的数据流中的已知结构：</p><ul><li>小规模的字母表</li><li>较长的连续相同的位或字符</li><li>频繁使用的字符</li><li>较长的连续重复的位或字符</li></ul><h3 id="游程编码"><a href="#游程编码" class="headerlink" title="游程编码"></a>游程编码</h3><h3 id="霍夫曼压缩"><a href="#霍夫曼压缩" class="headerlink" title="霍夫曼压缩"></a>霍夫曼压缩</h3><h3 id="LZW压缩算法"><a href="#LZW压缩算法" class="headerlink" title="LZW压缩算法"></a>LZW压缩算法</h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 压缩数据 </tag>
            
            <tag> 游程编码 </tag>
            
            <tag> 霍夫曼编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Machine Learning Yearning》阅读笔记</title>
      <link href="/posts/7f3faaf.html"/>
      <url>/posts/7f3faaf.html</url>
      
        <content type="html"><![CDATA[<h1 id="《Machine-Learning-Yearning》阅读笔记"><a href="#《Machine-Learning-Yearning》阅读笔记" class="headerlink" title="《Machine Learning Yearning》阅读笔记"></a>《Machine Learning Yearning》阅读笔记</h1><h2 id="机器学习为什么需要策略"><a href="#机器学习为什么需要策略" class="headerlink" title="机器学习为什么需要策略"></a>机器学习为什么需要策略</h2><h2 id="如何使用这本书帮助你的团队"><a href="#如何使用这本书帮助你的团队" class="headerlink" title="如何使用这本书帮助你的团队"></a>如何使用这本书帮助你的团队</h2><h2 id="先决条件和符号"><a href="#先决条件和符号" class="headerlink" title="先决条件和符号"></a>先决条件和符号</h2><h2 id="规模驱动机器学习进程"><a href="#规模驱动机器学习进程" class="headerlink" title="规模驱动机器学习进程"></a>规模驱动机器学习进程</h2><h2 id="你的开发集和测试集"><a href="#你的开发集和测试集" class="headerlink" title="你的开发集和测试集"></a>你的开发集和测试集</h2><h2 id="开发集合和测试集合应该来自统一分布"><a href="#开发集合和测试集合应该来自统一分布" class="headerlink" title="开发集合和测试集合应该来自统一分布"></a>开发集合和测试集合应该来自统一分布</h2><h2 id="开发集合和测试集合应该有多大规模"><a href="#开发集合和测试集合应该有多大规模" class="headerlink" title="开发集合和测试集合应该有多大规模"></a>开发集合和测试集合应该有多大规模</h2><h2 id="建立一个单值评估指标去优化"><a href="#建立一个单值评估指标去优化" class="headerlink" title="建立一个单值评估指标去优化"></a>建立一个单值评估指标去优化</h2><h2 id="优化指标和满意指标"><a href="#优化指标和满意指标" class="headerlink" title="优化指标和满意指标"></a>优化指标和满意指标</h2><h2 id="通过开发集和度量指标快速迭代"><a href="#通过开发集和度量指标快速迭代" class="headerlink" title="通过开发集和度量指标快速迭代"></a>通过开发集和度量指标快速迭代</h2><h2 id="什么时候修改开发集，测试集和评价指标？"><a href="#什么时候修改开发集，测试集和评价指标？" class="headerlink" title="什么时候修改开发集，测试集和评价指标？"></a>什么时候修改开发集，测试集和评价指标？</h2><h2 id="小结：建立开发集和测试集"><a href="#小结：建立开发集和测试集" class="headerlink" title="小结：建立开发集和测试集"></a>小结：建立开发集和测试集</h2><p>快速构建并且迭代你的第一个系统</p><p>误差分析：根据开发集样本去验证想法</p><p>在误差分析时并行评估多个想法</p><p>清洗误标注的开发集和测试集样本</p><p>将大型的开发集拆分为两个子集，专注其一</p><p>Eyeball 和 Blackbox 开发集该设置多大？</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 吴恩达 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何选择职业－一个美国高级工程师的建议</title>
      <link href="/posts/97876509.html"/>
      <url>/posts/97876509.html</url>
      
        <content type="html"><![CDATA[<h1 id="一个美国的高级工程师谈如何选职业"><a href="#一个美国的高级工程师谈如何选职业" class="headerlink" title="一个美国的高级工程师谈如何选职业"></a>一个美国的高级工程师谈如何选职业</h1><p>今天看到一篇<a href="https://github.com/ruanyf/weekly/blob/master/docs/issue-82.md" target="_blank" rel="noopener">博客</a>，是讲述了一个美国高级工程师如何选择职业的，感觉很有道理，于是摘抄过来。<a href="https://erikbern.com/2019/09/12/misc-unsolicited-career-advice.html" target="_blank" rel="noopener">原文地址</a></p><blockquote><p>停滞发展、或者缓慢发展的公司，完全是一个零和游戏。</p><p>如果你想晋升，必须等别人把位置空出来。你得到的，一定是其他人失去的。相比之下，快速发展的公司有源源不断的新人加入，最终每个人都会得到晋升！</p><p>最重要的是，业务的发展比人员增长快，所以你会被“往上拉”，拉到更高层的岗位。</p></blockquote><p>作者原来是一个外行，但是通过努力，进入了一家机器学习公司，现在发展得很好。他从自己的经历，得出一个观点： <strong>就业要选择发展最快的行业</strong>。</p><p>作者以自己为例，他并没有机器学习背景，但是公司发展得太快，他需要组建团队，自然就成了团队管理者，环境把他“拉”到了更高的位置上。位阶高了，就有了更多的机会和资源。</p><p>这让我想起自己呆过的一所大学，每年学校就那么几个名额，可以晋升教授和副教授，大家挤破头，如果今年评不上，就要至少再等一年。有的老师熬到头发白了，才评上副高职称。这就是发展缓慢的结果。去了这种地方，真是消耗生命。</p><p>那篇文章还提到了另外一点，我也很赞同。他说，就业的目的是为自己积累两种资本：人力资本（增长能力）和金融资本（多赚钱）。对于年轻人来说，人力资本更重要。 <strong>就业时，年轻人的关注重点应该是，快速增长自己的人力资本。</strong> 因为长期来看，在你的一生中，人力资本会比金融资本带来更大的回报。</p><p>最快速形成人力资本的方法，就是去聪明人多的地方，从比你更聪明的人身上学习。跟高手在一起工作，你会成长得非常快。大公司虽然高手很多，但是你接触不到也没用。 <strong>在一个快速发展的行业里面，加入一群聪明人组成的小团队，可能是事业成功的最佳方式。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLP系列－中文分词（基于词典）</title>
      <link href="/posts/9eeee454.html"/>
      <url>/posts/9eeee454.html</url>
      
        <content type="html"><![CDATA[<h1 id="NLP系列－中文分词（基于词典）"><a href="#NLP系列－中文分词（基于词典）" class="headerlink" title="NLP系列－中文分词（基于词典）"></a>NLP系列－中文分词（基于词典）</h1><h2 id="中文分词概述"><a href="#中文分词概述" class="headerlink" title="中文分词概述"></a>中文分词概述</h2><p>词是最小的能够独立活动的有意义的语言成分，一般分词是自然语言处理的第一项核心技术。英文中每个句子都将词用空格或标点符号分隔开来，而在中文中很难对词的边界进行界定，难以将词划分出来。在汉语中，虽然是以字为最小单位，但是一篇文章的语义表达却仍然是以词来划分的。因此处理中文文本时，需要进行分词处理，将句子转为词的表示，这就是中文分词。</p><h2 id="中文分词的三个难题"><a href="#中文分词的三个难题" class="headerlink" title="中文分词的三个难题"></a>中文分词的三个难题</h2><p>分词规则，消除歧义和未登录词识别：</p><ul><li>构建完美的分词规则便可以将所有的句子正确的划分，但是这根本无法实现，语言是长期发展自然而然形成的，而且语言规则庞大复杂，很难做出完美的分词规则。</li><li>在中文句子中，很多词是由歧义性的，在一句话也可能有多种分词方法。比如：”结婚/的/和尚/未结婚/的“，“结婚/的/和/尚未/结婚/的”，人分辨这样的句子都是问题，更何况是机器。</li><li>此外对于未登陆词，很难对其进行正确的划分。</li></ul><h2 id="目前主流分词方法"><a href="#目前主流分词方法" class="headerlink" title="目前主流分词方法"></a>目前主流分词方法</h2><p>基于规则，基于统计以及二者混合。本篇主要介绍一下基于规则词典进行分词。</p><h2 id="基于规则的分词"><a href="#基于规则的分词" class="headerlink" title="基于规则的分词"></a>基于规则的分词</h2><p>主要是人工建立词库也叫做词典，通过词典匹配的方式对句子进行划分。其实现简单高效，但是对未登陆词很难进行处理。主要有正向最大匹配法，逆向最大匹配法以及双向最大匹配法。</p><h3 id="正向最大匹配法FMM"><a href="#正向最大匹配法FMM" class="headerlink" title="正向最大匹配法FMM"></a>正向最大匹配法FMM</h3><p><code>FMM</code>的步骤是：</p><ol><li>从左向右取待分汉语句的m个字作为匹配字段，m为词典中最长词的长度。</li><li>查找词典进行匹配。</li><li>若匹配成功，则将该字段作为一个词切分出去。</li><li>若匹配不成功，则将该字段最后一个字去掉，剩下的字作为新匹配字段，进行再次匹配。</li><li>重复上述过程，直到切分所有词为止。</li></ol><p>代码实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cut</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    index <span class="token operator">=</span> <span class="token number">0</span>    text_size <span class="token operator">=</span> len<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">while</span> text_size <span class="token operator">></span> index<span class="token punctuation">:</span>        <span class="token keyword">for</span> size <span class="token keyword">in</span> range<span class="token punctuation">(</span>self<span class="token punctuation">.</span>window_size<span class="token operator">+</span>index<span class="token punctuation">,</span>index<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            piece <span class="token operator">=</span> text<span class="token punctuation">[</span>index<span class="token punctuation">:</span>size<span class="token punctuation">]</span>            <span class="token keyword">if</span> piece <span class="token keyword">in</span> self<span class="token punctuation">.</span>word_dict<span class="token punctuation">:</span>　<span class="token comment" spellcheck="true">#查看是否存在于词典中</span>                index <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">break</span>        index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>piece<span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分词效果：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_nlp_fenci_fmm.png" alt="FMM分词结果"></p><h3 id="逆向最大匹配法RMM"><a href="#逆向最大匹配法RMM" class="headerlink" title="逆向最大匹配法RMM"></a>逆向最大匹配法RMM</h3><p><code>RMM</code>的基本原理与<code>FMM</code>基本相同，不同的是分词的方向与<code>FMM</code>相反。<code>RMM</code>是从待分词句子的末端开始，也就是从右向左开始匹配扫描，每次取末端m个字作为匹配字段，匹配失败，则去掉匹配字段前面的一个字，继续匹配。</p><p>代码实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cut</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    index <span class="token operator">=</span> len<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    window_size <span class="token operator">=</span> min<span class="token punctuation">(</span>index<span class="token punctuation">,</span>self<span class="token punctuation">.</span>window_size<span class="token punctuation">)</span>    <span class="token keyword">while</span> index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> size <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token operator">-</span>window_size<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>            piece <span class="token operator">=</span> text<span class="token punctuation">[</span>size<span class="token punctuation">:</span>index<span class="token punctuation">]</span>            <span class="token keyword">if</span> piece <span class="token keyword">in</span> self<span class="token punctuation">.</span>word_dict<span class="token punctuation">:</span>　<span class="token comment" spellcheck="true">#查看是否存在于词典中</span>                index <span class="token operator">=</span> size <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">break</span>        index <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>piece<span class="token punctuation">)</span>    result<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>　<span class="token comment" spellcheck="true">#因为是从后向前分词，所以需要将结果逆序</span>    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分词效果：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_nlp_fenci_rmm.png" alt="RMM分词结果"></p><h3 id="双向最大匹配法Bi-MM"><a href="#双向最大匹配法Bi-MM" class="headerlink" title="双向最大匹配法Bi-MM"></a>双向最大匹配法Bi-MM</h3><p><code>Bi-MM</code>是将正向最大匹配法得到的分词结果和逆向最大匹配法得到的结果进行比较，然后按照最大匹配原则，选取词数切分最少的作为结果。据<code>SunM.S.</code>和<code>Benjamin K.T.(1995)</code>的研究表明，中文中<code>90.0%</code>左右的句子，正向最大匹配法和逆向最大匹配法完全重合且正确，只有大概<code>9.0%</code>的句子两种切分方法得到的结果不一样，但其中必有一个是正确的（歧义检测成功），只有不到<code>1.0%</code>的句子，使用正向最大匹配法和逆向最大匹配法的切分虽然重合但是错的，或者两种方法切分不同但结果都不对（歧义检测失败）。</p><p>双向最大匹配的规则是：</p><ol><li>如果正反向分词结果词数不同，则取分词数量少的那个。</li><li>如果分词结果词数相同：<ul><li>分词结果相同，没有歧义，返回任意一个。</li><li>分词结果不同，返回其中单字数量较少的那个。</li></ul></li></ol><p>上述例子中词数相同，但结果不同，逆向最大匹配法的分词结果单字个数是<code>1</code>，所以返回的是逆向最大匹配法的结果。</p><p>代码实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cut</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    res_fmm <span class="token operator">=</span> self<span class="token punctuation">.</span>FMM<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    res_rmm <span class="token operator">=</span> self<span class="token punctuation">.</span>RMM<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>res_fmm<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>res_rmm<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> res_fmm <span class="token operator">==</span> res_rmm <span class="token punctuation">:</span>            <span class="token keyword">return</span> res_fmm        <span class="token keyword">else</span><span class="token punctuation">:</span>            f_word_count <span class="token operator">=</span> len<span class="token punctuation">(</span><span class="token punctuation">[</span>w <span class="token keyword">for</span> w <span class="token keyword">in</span> res_fmm <span class="token keyword">if</span> len<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            r_word_count <span class="token operator">=</span> len<span class="token punctuation">(</span><span class="token punctuation">[</span>w <span class="token keyword">for</span> w <span class="token keyword">in</span> res_rmm <span class="token keyword">if</span> len<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> res_fmm <span class="token keyword">if</span> f_word_count <span class="token operator">&lt;</span> r_word_count <span class="token keyword">else</span> res_rmm    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> res_fmm <span class="token keyword">if</span> len<span class="token punctuation">(</span>res_fmm<span class="token punctuation">)</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>res_rmm<span class="token punctuation">)</span> <span class="token keyword">else</span> res_rmm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分词效果：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_nlp_fenci_bimm.png" alt="BIMM分词结果"></p><p>可能有人会问，如果单字的数量也相同怎么办？如果你明白了中文分词的原理和实际用处的话，那么这个问题的答案自然会知晓。中文分词目前仍然没有完全准确的结果，一句话可以分成不同的分词结果。如果单字数量也相同，按照正常的逻辑那么会继续比较双字词，但是这样却没有可比性，在中文中大多数都是双字词，所以即使双字词的数量相同，但是结果可能却有很多种可能。</p><p>我们比较单字词的数量，取数量少的那个结果，只是为了大概率更准确一些，因为中文字单字为词的情况比较少，大多数是双字或多字词。但是针对一些特殊的句子，这种判断方法不见得结果是最优的。虽然如此，但是基于规则的中文分词仍然是目前为止最简单高效的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>基于规则的分词，一般较为简单高效，但是词典的维护很大的人力维护，同时对于未登录词也没有很好的解决办法。双向最大匹配结合了正反两种方法的结果，结果较为准确，在实用中文信息处理中使用广泛。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>《Python自然语言处理实战-核心技术与算法》涂铭，刘祥，刘树春 著</li><li>《统计自然语言处理》 宗成庆 著</li><li>详细代码可参考<a href="https://github.com/hiyoung123/NLP" target="_blank" rel="noopener">GitHub</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 自然语言处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自然语言处理 </tag>
            
            <tag> nlp </tag>
            
            <tag> 中文分词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown基本语法</title>
      <link href="/posts/5d36ff15.html"/>
      <url>/posts/5d36ff15.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h1><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p></blockquote><hr><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown支持6种级别的标题，对应html标签 <code>h1</code> ~ <code>h6</code>，严格的Markdown语法<code>＃</code>和文本之间要有一个空格。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># h1　这是一级标题</span><span class="token comment" spellcheck="true">## h2　这是二级标题</span><span class="token comment" spellcheck="true">### h3　这是三级标题</span><span class="token comment" spellcheck="true">#### h4　这是四级标题</span><span class="token comment" spellcheck="true">##### h5　这是五级标题</span><span class="token comment" spellcheck="true">###### h6　这是六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下（实际演示会造成菜单混乱，所以此处使用截图）：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_markdown_list_1.png" alt=""></p><p>除此之外，Markdown还支持另外一种形式的标题展示形式，使用下划线进行文本大小的控制。但是这种形式仅有两种表现形式：即一级标题和二级标题。</p><pre class="line-numbers language-bash"><code class="language-bash">这是一级标题<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>这是二级标题----------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_markdown_list_2.png" alt=""></p><hr><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>使用三个或者三个以上的<code>-</code>或者<code>*</code>都可以。</p><pre class="line-numbers language-bash"><code class="language-bash">-------********<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><hr><hr><hr><hr><p>可以看出效果都是一样的。</p><hr><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul><li><p>粗体</p><p>要加粗的文字左右分别用两个<code>*</code>号或下划线<code>_</code>包起来。</p></li><li><p>斜体</p><p>要加斜的文字左右分别用一个<code>*</code>号或下划线<code>_</code>包起来。</p></li><li><p>斜粗体</p><p>要加粗加斜的文字左右分别用三个<code>*</code>号或下划线<code>_</code>包起来。</p></li><li><p>删除线</p><p>要加删除线的文字左右分别用两个波浪线<code>~~</code>包起来。</p></li><li><p>下划线</p><p>要加下划线可以通过 HTML 的<code>&lt;u&gt;</code>标签来实现。</p></li><li><p>高亮</p><p>文字高亮功能能使行内部分文字高亮，使用一对反引号。</p></li></ul><pre class="line-numbers language-bash"><code class="language-bash">**这是加粗的文字**__这是加粗的文字__*这是倾斜的文字*_这是倾斜的文字_***这是斜体加粗的文字***___这是斜体加粗的文字___~~这是加删除线的文字~~<span class="token operator">&lt;</span>u<span class="token operator">></span>这是加下划线的文字<span class="token operator">&lt;</span>/u<span class="token operator">></span>这是要<span class="token variable"><span class="token variable">`</span>高亮<span class="token variable">`</span></span>的文字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br>_这是倾斜的文字_<br><strong><em>这是斜体加粗的文字</em></strong><br><strong>_这是斜体加粗的文字_</strong><br><del>这是加删除线的文字</del><br><u>这是加下划线的文字</u></p><p>这是要<code>高亮</code>的文字</p><hr><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在引用的文字前加<code>&gt;</code>即可，同样严格语法需要中间加一个空格。引用也可以嵌套，如加两个<code>&gt;&gt;</code>三个<code>&gt;&gt;&gt;</code>n个…</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">></span>最外层嵌套<span class="token operator">>></span>第一层嵌套<span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span>最内层嵌套<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><blockquote><p>最外层嵌套</p><blockquote><p>第一层嵌套</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>最内层嵌套</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。无序列表使用星号<code>*</code>、加号<code>+</code>或是减号<code>-</code>作为列表标记：</p><pre class="line-numbers language-bash"><code class="language-bash">* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><p>有序列表使用数字并加上 <code>.</code> 号来表示，如：</p><pre class="line-numbers language-bash"><code class="language-bash">1. 第一项2. 第二项3. 第三项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>列表可以嵌套使用，只需在子列表中的选项添加四个空格即可：</p><pre class="line-numbers language-bash"><code class="language-bash">1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果如下：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><hr><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来，例如：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">`</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token variable">`</span></span>函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下：</p><p><code>print()</code>函数</p><p>代码块需要使用４个空格或者一个制表符（Tab键）：</p><pre class="line-numbers language-bash"><code class="language-bash">    fun <span class="token punctuation">(</span>x: Int, y: Int<span class="token punctuation">)</span>: Int <span class="token punctuation">{</span>      <span class="token keyword">return</span> x + y    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    效果如下</p><pre class="line-numbers language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> Int<span class="token punctuation">,</span> y<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者使用’’’code’’’把代码包裹起来，也可以指定代码语言，这样可以进行代码高亮：</p><pre><code>​```javascript$(document).ready(function () {    alert(&#39;RUNOOB&#39;);});​```</code></pre><p>效果如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'RUNOOB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="基本链接的使用方法"><a href="#基本链接的使用方法" class="headerlink" title="基本链接的使用方法"></a>基本链接的使用方法</h3><pre><code>[链接名称](链接地址 &quot;描述&quot;)　其中描述为鼠标放到url的显示文字，可加可不加。或者&lt;链接地址&gt;</code></pre><pre class="line-numbers language-bash"><code class="language-bash">这是一个链接 <span class="token punctuation">[</span>hiyoung blog<span class="token punctuation">]</span><span class="token punctuation">(</span>https://hiyoungai.com　<span class="token string">"我的博客"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>效果如下：</p><p>这是一个链接 <a href="https://hiyoungai.com" title="我的博客">hiyoung blog</a></p><p>直接使用链接地址：</p><pre><code>(https://hiyoungai.com)</code></pre><p>效果如下：</p><p><a href="https://hiyoungai.com">https://hiyoungai.com</a></p><h3 id="高级链接的使用方法"><a href="#高级链接的使用方法" class="headerlink" title="高级链接的使用方法"></a>高级链接的使用方法</h3><pre><code>链接使用变量代替，文档末尾定义变量且带有链接地址。这个链接使用１作为链接变量[Google][1]这个链接使用url作为链接变量[baidu][url][1]:https://www.google.com[url]:https://www.baidu.com</code></pre><p>效果如下：</p><p>这个链接使用１作为链接变量<a href="https://www.google.com" target="_blank" rel="noopener">Google</a><br>这个链接使用url作为链接变量<a href="https://www.baidu.com" target="_blank" rel="noopener">baidu</a></p><h3 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h3><p>每一个标题都是一个锚点，和HTML的锚点<code>#</code>类似：</p><pre><code>[回到顶部](#Markdown基本语法)</code></pre><p>效果如下：</p><p><a href="#Markdown基本语法">回到顶部</a></p><hr><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>基本语法：</p><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题title&quot;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加也可以使用高级链接的方式，此处不再演示。例子：![Write](https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/img_markdown.jpeg &quot;写作&quot;)</code></pre><p>效果如下：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_markdown.jpeg" alt="Write 属性文本" title="写作"></p><hr><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><pre><code>|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><p>效果如下：</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h3 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h3><p>我们可以设置表格的对齐方式：</p><ul><li><code>-:</code> 设置内容和标题栏居右对齐。</li><li><code>:-</code> 设置内容和标题栏居左对齐。</li><li><code>:-:</code> 设置内容和标题栏居中对齐。</li></ul><p>效果如下：</p><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><p>效果如下：</p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><p>而且表格中也可以混用其他语法：如粗体斜体，插入图片等。</p><hr><h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="支持html元素"><a href="#支持html元素" class="headerlink" title="支持html元素"></a>支持html元素</h3><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</code></pre><p>效果如下：</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p> Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdow使用反斜杠转义特殊字符：</p><pre><code>**文本加粗**\*\* 正常显示星号 \*\*</code></pre><p> 效果如下：</p><p><strong>文本加粗</strong><br>** 正常显示星号 **</p><p> Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   下划线{}  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号</code></pre><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 <code>$$</code> 包裹 <code>TeX</code> 或 <code>LaTeX</code> 格式的数学公式来实现。提交后，问答和文章页会根据需要加载 <code>Mathjax</code> 对数学公式进行渲染。如：</p><pre><code>$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}$$</code></pre><p>效果如下：<br>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>流程图需要平台支持，而我使用的hexo，需要安装如下三个插件：</p><pre><code>npm install --save hexo-filter-flowchartnpm install --save hexo-filter-mermaid-diagramsnpm install --save hexo-filter-sequence</code></pre><p>同时，对于<code>Matery</code>主题的博客还需要配置一下_config.xml和修改footer.ejs。</p><p>在主题的_config.yml中添加如下代码：</p><pre><code># Mermaid tagmermaid:  enable: true  # Available themes: default | dark | forest | neutral  theme: forest  cdn: https://cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js  #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.0.0/mermaid.min.js</code></pre><p>在footer.ejs的结尾处添加：</p><pre><code>&lt;div class=&quot;progress-bar&quot;&gt;&lt;/div&gt;&lt;% if (theme.mermaid.enable) { %&gt;  &lt;script src=&#39;&lt;%= theme.mermaid.cdn %&gt;&#39;&gt;&lt;/script&gt;  &lt;script&gt;    if (window.mermaid) {      mermaid.initialize({theme: &#39;forest&#39;});    }  &lt;/script&gt;&lt;% } %&gt;</code></pre><p>如果不使用<code>mermaid</code>的话那么不需要上述配置。</p><h4 id="横向流程图"><a href="#横向流程图" class="headerlink" title="横向流程图"></a>横向流程图</h4><pre><code>​&lt;pre class=&quot;mermaid&quot;&gt;graph LRA[方形] --&gt;B(圆角)    B --&gt; C{条件a}    C --&gt;|a=1| D[结果1]    C --&gt;|a=2| E[结果2]    F[横向流程图]​&lt;/pre&gt;</code></pre><pre class="mermaid">graph LRA[方形] -->B(圆角)    B --> C{条件a}    C -->|a=1| D[结果1]    C -->|a=2| E[结果2]    F[横向流程图]</pre><h4 id="纵向流程图"><a href="#纵向流程图" class="headerlink" title="纵向流程图"></a>纵向流程图</h4><pre><code>​&lt;pre class=&quot;mermaid&quot;&gt;graph TDA[方形] --&gt; B(圆角)    B --&gt; C{条件a}    C --&gt; |a=1| D[结果1]    C --&gt; |a=2| E[结果2]    F[竖向流程图]​&lt;/pre&gt;</code></pre><pre class="mermaid">graph TDA[方形] --> B(圆角)    B --> C{条件a}    C --> |a=1| D[结果1]    C --> |a=2| E[结果2]    F[竖向流程图]</pre><h4 id="标准流程图"><a href="#标准流程图" class="headerlink" title="标准流程图"></a>标准流程图</h4><pre><code>​&lt;div id=&quot;flowchart-0&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;</code></pre><div id="flowchart-1" class="flow-chart"></div><h4 id="标准流程图（横向）"><a href="#标准流程图（横向）" class="headerlink" title="标准流程图（横向）"></a>标准流程图（横向）</h4><pre><code>​&lt;div id=&quot;flowchart-2&quot; class=&quot;flow-chart&quot;&gt;&lt;/div&gt;</code></pre><div id="flowchart-3" class="flow-chart"></div><h4 id="UML时序图"><a href="#UML时序图" class="headerlink" title="UML时序图"></a>UML时序图</h4><pre><code>​&lt;div id=&quot;sequence-0&quot;&gt;&lt;/div&gt;</code></pre><div id="sequence-1"></div><h4 id="UML时序图（复杂样例）"><a href="#UML时序图（复杂样例）" class="headerlink" title="UML时序图（复杂样例）"></a>UML时序图（复杂样例）</h4><pre><code>​&lt;div id=&quot;sequence-2&quot;&gt;&lt;/div&gt;</code></pre><div id="sequence-3"></div><h4 id="UML标准时序图"><a href="#UML标准时序图" class="headerlink" title="UML标准时序图"></a>UML标准时序图</h4><pre><code>​&lt;pre class=&quot;mermaid&quot;&gt;%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头  sequenceDiagram    participant 张三    participant 李四    张三-&gt;王五: 王五你好吗？    loop 健康检查        王五-&gt;王五: 与疾病战斗    end    Note right of 王五: 合理 食物 &lt;br/&gt;看医生...    李四--&gt;&gt;张三: 很好!    王五-&gt;李四: 你怎么样?    李四--&gt;王五: 很好!​&lt;/pre&gt;</code></pre><pre class="mermaid">%% 时序图例子,-> 直线，-->虚线，->>实线箭头  sequenceDiagram    participant 张三    participant 李四    张三->王五: 王五你好吗？    loop 健康检查        王五->王五: 与疾病战斗    end    Note right of 王五: 合理 食物 <br/>看医生...    李四-->>张三: 很好!    王五->李四: 你怎么样?    李四-->王五: 很好!</pre><h4 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h4><pre><code>​&lt;pre class=&quot;mermaid&quot;&gt;%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h​&lt;/pre&gt;</code></pre><pre class="mermaid">%% 语法示例        gantt        dateFormat  YYYY-MM-DD        title 软件开发甘特图        section 设计        需求                      :done,    des1, 2014-01-06,2014-01-08        原型                      :active,  des2, 2014-01-09, 3d        UI设计                     :         des3, after des2, 5d    未来任务                     :         des4, after des3, 5d        section 开发        学习准备理解需求                      :crit, done, 2014-01-06,24h        设计框架                             :crit, done, after des2, 2d        开发                                 :crit, active, 3d        未来任务                              :crit, 5d        耍                                   :2d        section 测试        功能测试                              :active, a1, after des3, 3d        压力测试                               :after a1  , 20h        测试报告                               : 48h</pre><h3 id="Emoj表情"><a href="#Emoj表情" class="headerlink" title="Emoj表情"></a>Emoj表情</h3><p><code>Github</code>的<code>Markdown</code>语法支持添加emoji表情，输入不同的符号码（两个冒号包着的字符）可以显示出不同的表情（本网站没有添加该插件，需要支持Github的markdwon才可以正常显示）：</p><pre><code>:bluesh:</code></pre><p>效果如下：</p><p>😀</p><p> 具体每一个表情的符号码，可以查询<code>Github</code>的官方网页<a href="http://www.emoji-cheat-sheet.com/" target="_blank" rel="noopener">http://www.emoji-cheat-sheet.com</a>。 </p><h3 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h3><pre><code>&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;缩略图&quot;&gt;      &lt;source id=&quot;视频url&quot; type=&quot;video/mp4&quot;&gt;      &lt;/video&gt;例子：&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot; poster=&quot;&quot;&gt;      &lt;source id=&quot;mp4&quot; src=&quot;https://www.typora.io/img/beta.mp4&quot;&gt;      &lt;/video&gt;</code></pre><p>效果可在<a href="#Typora">Typora</a>看到。</p><h3 id="插入Github-Star"><a href="#插入Github-Star" class="headerlink" title="插入Github Star"></a>插入Github Star</h3><pre><code>  &lt;iframe                         style=&quot;margin-left: 2px; margin-bottom:-5px;&quot;                         frameborder=&quot;0&quot; scrolling=&quot;0&quot; width=&quot;100px&quot; height=&quot;20px&quot;                         src=&quot;https://ghbtns.com/github-btn.html?user=hiyoung123&amp;repo=hiyoung123.github.io&amp;type=star&amp;count=true&quot; &gt;                     &lt;/iframe&gt;</code></pre><p>效果如下：</p>  <iframe                         style="margin-left: 2px; margin-bottom:-5px;"                         frameborder="0" scrolling="0" width="100px" height="20px"                         src="https://ghbtns.com/github-btn.html?user=hiyoung123&repo=hiyoung123.github.io&type=star&count=true" >                     </iframe>-- -- --<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><p>特点：简洁，快速，可以实现所见即所得。看下面这个视频你就会知道他的<code>Simple, yet Powerful</code></p><video id="video" width="420" height="320" autoplay muted="muted" preload="preload" loop="loop" poster="https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/loading.gif">      <source id="mp4" src="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/video/video_markdown_typora.mp4" type="video/mp4">      </video><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora官方下载</a> </p><h3 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h3><p>特点：插件丰富（毕竟是Github推出的），并且可以用作其他语言的编辑器。其实也可以做到一边编辑一边看结果，只不过是需要多开一个窗口，😄！</p><p><a href="https://github.com/atom/atom" target="_blank" rel="noopener">Atom下载地址</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>作者也是刚开始接触这两个软件，所以不是特别熟悉，等使用一段时间，对比之后再来详细的写一下。<br>流程图插件配置参考博客：<a href="https://blog.csdn.net/Olivia_Vang/article/details/92987859" target="_blank" rel="noopener">https://blog.csdn.net/Olivia_Vang/article/details/92987859</a></p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op​</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st->op->condcond(yes)->io->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op​</textarea><textarea id="flowchart-2-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script><textarea id="flowchart-3-code" style="display: none">st=>start: 开始框op=>operation: 处理框cond=>condition: 判断框(是或否?)sub1=>subroutine: 子流程io=>inputoutput: 输入输出框e=>end: 结束框st(right)->op(right)->condcond(yes)->io(bottom)->econd(no)->sub1(right)->op</textarea><textarea id="flowchart-3-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-3-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-3-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-3", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象A->对象B: 你真的好吗？​</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><textarea id="sequence-1-code" style="display: none">对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象A->对象B: 你真的好吗？</textarea><textarea id="sequence-1-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-1", options);</script><textarea id="sequence-2-code" style="display: none">Title: 标题：复杂使用对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象B->小三: 你好吗小三-->>对象A: 对象B找我了对象A->对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩​</textarea><textarea id="sequence-2-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-2-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-2", options);</script><textarea id="sequence-3-code" style="display: none">Title: 标题：复杂使用对象A->对象B: 对象B你好吗?（请求）Note right of 对象B: 对象B的描述Note left of 对象A: 对象A的描述(提示)对象B-->对象A: 我很好(响应)对象B->小三: 你好吗小三-->>对象A: 对象B找我了对象A->对象B: 你真的好吗？Note over 小三,对象B: 我们是朋友participant CNote right of C: 没人陪我玩</textarea><textarea id="sequence-3-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-3-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-3-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-3", options);</script>]]></content>
      
      
      <categories>
          
          <category> 便捷工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
            <tag> Atom </tag>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最全Hexo博客搭建教程以及优化</title>
      <link href="/posts/4dbbde95.html"/>
      <url>/posts/4dbbde95.html</url>
      
        <content type="html"><![CDATA[<h1 id="最全Hexo博客搭建教程以及优化"><a href="#最全Hexo博客搭建教程以及优化" class="headerlink" title="最全Hexo博客搭建教程以及优化"></a>最全Hexo博客搭建教程以及优化</h1><blockquote><p>使用Hexo+Github搭建一个免费的个人博客，本文略长，大佬请自行选择阅读。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一边上班一边搭建博客，忙了大概有一周左右的时间，终于把博客都调好了。我使用的是<code>Hexo</code>框架，主题是闪烁之狐之狐的<a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">hexo-theme-matery</a>，本文介绍的也是该主题的配置，大家如果喜欢可以去下载使用。</p><p>本文除了介绍了<code>matery</code>主题的一些基础配置之外，也介绍了一些我个人和在其他大佬处看到的功能定制。只要你懂得操作软件，懂得键盘打字，那么就可以通过本教程搭建一个完全<code>免费</code>的个人博客。如果你是技术大佬，那么更可以通过修改源码去定制更好的功能。本文也记录了一些我搭建过程中遇到的坑，希望可以帮你在搭建过程中少走一些弯路，同时如果你也遇到一些本文没有记载的<em>bug</em>，也请你给我留言，让我们一起学习解决，多谢。</p><h2 id="第一部分：准备"><a href="#第一部分：准备" class="headerlink" title="第一部分：准备"></a>第一部分：准备</h2><h3 id="1-Hexo介绍"><a href="#1-Hexo介绍" class="headerlink" title="1.Hexo介绍"></a>1.Hexo介绍</h3><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一款快速、简洁且高效的基于<code>Node.js</code>的静态博客框架，四大特性：</p><ul><li>超快速度：<code>Node.js</code> 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。</li><li>支持Markdown：<code>Hexo</code> 支持 <code>GitHub Flavored Markdown</code> 的所有功能，甚至可以整合 <code>Octopress</code> 的大多数插件。</li><li>一键部署：只需一条指令即可部署到 <code>GitHub Pages</code>, <code>Heroku</code>或其他平台。</li><li>插件和可扩展性：强大的 <code>API</code> 带来无限的可能，与数种模板引擎<code>（EJS，Pug，Nunjucks）</code>和工具<code>（Babel，PostCSS，Less/Sass）</code>轻易集成。</li></ul><p>这使得很多非编程人员可以很轻松，很自由的定制博客。废话不多说，开始进入搭建环境把。</p><h3 id="2-安装Node环境"><a href="#2-安装Node环境" class="headerlink" title="2.安装Node环境"></a>2.安装Node环境</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>直接命令行输入：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>或者到<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">官网</a>下载：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_hexo_download_nodejs_1.png" alt=""></p><p>下载完成后解压到指定文件夹，然后配置环境变量（目的是为了在终端可以任意位置使用它）：</p><p>首先打开<code>~/.bashrc</code>文件</p><pre class="line-numbers language-bash"><code class="language-bash">vim ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件的最下端填写如下代码</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${PATH}</span><span class="token keyword">:</span><span class="token variable">$HOME</span>/node-v12.13.0-linux-x64/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为我下载的是<code>64</code>位<code>12.13.0</code>版本，并且放到了根目录<code>home</code>下，你可以根据自己的需求进行更改上面的路径。保存退出后，执行命令让修改生效。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在终端输入<code>npm -v</code>和<code>node -v</code>验证是否安装配置成功</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$npm</span> -v6.13.0<span class="token variable">$node</span> -vv12.13.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>下载稳定版或者最新版都可以<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js</a>，安装选项全部默认，一路点击<code>Next</code>。最后安装好之后，按<code>Win+R</code>打开命令提示符，输入<code>node -v</code>和<code>npm -v</code>，如果出现版本号，那么就安装成功了。</p><h4 id="npm加速"><a href="#npm加速" class="headerlink" title="npm加速"></a>npm加速</h4><p>一般国内通过<code>npm</code>下载东西会比较慢，所以需要添加阿里的源进行加速。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3.安装Git"></a>3.安装Git</h3><p>为了把本地的网页文件上传到<code>Github</code>上面去，我们需要用到分布式版本控制工具 <code>git</code>。关于<code>git</code>和<code>Github</code>这里就不多介绍了。同样分为两个版本：</p><h4 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h4><p>在Linux平台比较方便，直接使用命令就可以安装：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后即可享用。</p><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows"></a>Windows</h4><p>需要去官网下载<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>，下载完成后按照向导安装即可。</p><blockquote><p>注意：在安装的最后一步添加路径时选择 Use Git from the Windows Command Prompt 。这是把Git添加到了环境变量中，以便可以在cmd中使用。而本人推荐使用下载附带的git bash进行操作，比较方便。</p></blockquote><p>对于git的讲解和使用，大家可以自行到网上查找。<code>Hexo</code>搭建的过程中，已经封装好一个git命令，可以直接使用<code>hexo</code>的命令将生成的静态网站代码同步到<code>github</code>的仓库里。但是如果想要自己同步源码的话，那么就需要掌握一下git命令了。在这里我只列举一下常用的命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init <span class="token comment" spellcheck="true">#初始化一个git库，生成.git文件夹，里面保存的是该git库的记录和配置</span><span class="token function">git</span> remote add origin 远程仓库地址 <span class="token comment" spellcheck="true">#将本地仓库和远程仓库链接起来</span><span class="token function">git</span> pull <span class="token comment" spellcheck="true">#同步代码</span><span class="token function">git</span> status <span class="token comment" spellcheck="true">#检查本地仓库修改状态</span><span class="token function">git</span> add 文件名 或者 <span class="token function">git</span> add <span class="token keyword">.</span>  <span class="token comment" spellcheck="true">#将本地修改的文件加入缓存</span><span class="token function">git</span> commit 文件名 -m <span class="token string">"描述"</span> 或者 <span class="token function">git</span> commit <span class="token keyword">.</span> -m <span class="token string">"描述"</span>  <span class="token comment" spellcheck="true">#提交缓存，并描述该提交</span><span class="token function">git</span> push -u origin code <span class="token comment" spellcheck="true"># 将本地的提交推送到远程仓库.-u是代表输入账号密码，如果你已经配置了git的公钥，那么可直接push.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-注册Github"><a href="#4-注册Github" class="headerlink" title="4.注册Github"></a>4.注册Github</h3><p><code>Git</code>安装完成之后就可以去<a href="https://github.com/" target="_blank" rel="noopener">Github</a>上注册账号并创建仓库， 用来存放我们的网站了。</p><blockquote><p> Github是基于 Git 做版本控制的代码托管平台，同时也是全球最大的代（同）码（性）托（交）管（友）网站。 </p></blockquote><p>创建完账户之后新建一个项目仓库<code>New repository</code>，如下所示 </p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_hexo_github_new_rep.png" alt=""></p><p>接着输入仓库名，后面一定要加<code>.github.io</code>后缀，README初始化也要勾上。 如下图配置（因为我的已经存在相同的仓库，所以报错）</p><blockquote><p>要创建一个和你用户名相同的仓库，后面加.github.io，只有这样将来要部署到GitHub page的时候，才会被识别，也就是<a href="http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名" target="_blank" rel="noopener">http://xxxx.github.io，其中xxx就是你注册`GitHub`的用户名</a> </p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_hexo_github_creat_rep.png" alt=""></p><p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，点击新出来的链接，就会进入到<code>github page</code>的界面。看到这个界面就说明<code>Github</code>的<code>page</code>已经可以使用了，接下来我们进入<code>Hexo</code>的搭建。</p><h2 id="第二部分：搭建"><a href="#第二部分：搭建" class="headerlink" title="第二部分：搭建"></a>第二部分：搭建</h2><h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h3><p>首先创建一个文件夹，名字自取如<code>YoungBlog</code>，用来存放自己的博客文件，然后<code>cd</code>到这个文件夹下（或者在这个文件夹下直接右键<code>git bash</code>打开）。在该目录下输入如下命令安装<code>Hexo</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来初始化一下<code>hexo</code>,即初始化我们的网站，</p><pre class="line-numbers language-bash"><code class="language-bash">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>初始化要求必须是空的目录下进行。</p></blockquote><p>接着输入<code>npm install</code>安装必备的组件。</p><p>初始化完成后会在目下生成几个文件和文件夹，这些就是我们需要编写的网站源码了：</p><ul><li><code>node_modules:</code> 依赖包，npm安装的一些插件存放的文件夹。</li><li><code>public：</code>存放生成的页面，网站正式展示的内容。</li><li><code>scaffolds：</code>生成文章和页面的一些模板。</li><li><code>source：</code>用来存放你的文章和数据。</li><li><code>themes：</code>主题存放文件夹。</li><li><code>_config.yml:</code> 博客的配置文件，非主题的配置。</li><li><code>db.json</code>：博客的版本信息等。</li><li><code>package.json</code>和<code>package-lock.json</code>：依赖包和版本信息。</li></ul><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>就可以看到我们的博客啦，效果如下：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_hexo_web_1.png" alt=""></p><p>这里介绍一下<code>Hexo</code>常用的几个命令：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo clean <span class="token comment" spellcheck="true">#清除db和public文件下的内容，或可写成hexo cl</span>hexo g <span class="token comment" spellcheck="true">#根据源码生成静态文件</span>hexo s <span class="token comment" spellcheck="true">#开启本地的server，这样可在本地通过localhost:4000访问博客。或可写成hexo server</span>hexo d <span class="token comment" spellcheck="true">#部署网站的静态文件到配置好的托管网站，如Github或者Coding，配置在_config中的Deploy。</span><span class="token comment" spellcheck="true">#后续如果安装了一些插件，可能导致缩写无法使用，所以hexo d也可以写成hexo deploy。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看完展示后，可以按<code>ctrl+c</code>关闭本地服务器。</p><h3 id="2-部署到Github"><a href="#2-部署到Github" class="headerlink" title="2.部署到Github"></a>2.部署到Github</h3><p>首先要安装一个插件，用于<code>Hexo</code>部署代码的。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成之后，在<code>_config.yml</code>配置文件中加入如下代码，这样我们在使用<code>hexo d</code>的时候就可以直接部署到<code>Github</code>上了，如果你想部署到其他平台（支持<code>Git</code>），也可以添加到这里。</p><pre class="line-numbers language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: https://github.com/hiyoung123/hiyoung123.github.io  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果不了解git那么请先自行百度学习一下git的相关配置。</p></blockquote><p><code>Git</code>分为无密推送和需要输入账户密码推送。无密码推送就是需要在本地生成公钥，然后添加到代码托管平台如<code>Github</code>，这样在推送时候就不需要输入账户密码了。而反之的话，每次推送就会要求你输入账户密码。下面说一下无密推送的配置过程。</p><p>首先打开<code>Git bash</code>，输入如下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户名和邮箱根据你注册<code>github</code>的信息自行修改。</p><p>然后生成密钥SSH key：</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候它会告诉你已经生成了<code>.ssh</code>的文件夹。在你的电脑中找到这个文件夹。或者<code>git bash</code>中输入</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开<a href="http://github.com/" target="_blank" rel="noopener">github</a>，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个<code>SSH</code>，名字随便取一个都可以，把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p>这样你的电脑就跟<code>Github</code>建立起的安全联系，以后推送代码就不需要输入密码了。</p><blockquote><p>注意：这里使用hexo d推送代码，推送的是编译完成的静态文件，也就是上面说的public文件夹下的代码，而不是网站的源代码。</p></blockquote><h3 id="3-写文章、发布文章"><a href="#3-写文章、发布文章" class="headerlink" title="3.写文章、发布文章"></a>3.写文章、发布文章</h3><p>输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到<code>github</code>上。这时打开你的<code>github.io</code>主页就能看到发布的文章啦。</p><h3 id="4-绑定个人域名"><a href="#4-绑定个人域名" class="headerlink" title="4.绑定个人域名"></a>4.绑定个人域名</h3><p>现在默认的域名还是<code>xxx.github.io</code>，是不是很没有牌面？想不想也像我一样弄一个专属域名呢，首先你得购买一个域名，xx云都能买，看你个人喜好了。</p><p>以我的阿里云为例，如下图所示，添加两条解析记录：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_hexo_add_domin.png" alt=""></p><p>我添加的是A记录，也就是需要添加<code>IP</code>地址的，你部署到<code>Github</code>的<code>IP</code>可以通过<code>ping xxx.github.io</code>获得。当然也可以添加<code>CNAME</code>记录，记录值填写<code>xxx.github.io</code>即可。</p><p>解析域名完成后，需要在<code>Github</code>上加入你的域名。打开你的<code>github</code>博客项目，点击<code>settings</code>，拉到下面<code>Custom domain</code>处，填上你自己的域名，保存完成后如下图：</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_hexo_add_domin_github.png" alt=""></p><blockquote><p>注意：如果下面的Enforce HTTPS 没有点击的话请勾选上。这个作用是使你的网络请求以更安全的HTTPS方式请求。</p></blockquote><p>这时候你的项目根目录应该会出现一个名为<code>CNAME</code>的文件了，如果没有的话，打开你本地博客<code>/source</code>目录，新建<code>CNAME</code>文件，注意没有后缀。然后在里面写上你的域名，保存。因为每次推送代码的时候，都会把<code>Github</code>自动生成的<code>CNAME</code>文件删除掉，导致每次推送后域名和<code>Github</code>就失去了联系，我们在<code>source/</code>下自己创建一个<code>CNAME</code>文件，这样就可以永久保存了。</p><h3 id="5-备份博客源文件"><a href="#5-备份博客源文件" class="headerlink" title="5.备份博客源文件"></a>5.备份博客源文件</h3><p>这次我们提交到<code>Github</code>上的是博客的源代码，这样我们就可以在不同电脑上进行操作了。</p><p>首先在<code>github</code>博客仓库下新建一个分支<code>code</code>，然后<code>git clone</code>到本地，把<code>.git</code>文件夹拿出来，放在博客根目录下（也可以博客根目录下执行<code>git init</code> , 然后 <code>git remote add origin 远端仓库地址的方式</code>）。然后<code>git checkout code</code>切换到<code>code</code>分支，然后<code>git add .</code>，然后<code>git commit -m &quot;xxx&quot;</code>，最后<code>git push origin code</code>提交就行了。</p><h2 id="第三部分：定制"><a href="#第三部分：定制" class="headerlink" title="第三部分：定制"></a>第三部分：定制</h2><p>这部分主要讲解一下主题的功能定制，除了基本的功能定制外，还有我参考各个大佬们的功能，有些我虽然没有加在我的博客上，但是也列在了此处。所以先在此处感谢一下各位大佬的博客文章。</p><p><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">闪烁之狐的原版定制</a> | <a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">Godweiyang</a> | <a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">洪卫</a> | <a href="https://blog.sky03.cn/2019/42790.html" target="_blank" rel="noopener">Sky03</a></p><h3 id="1-更换主题"><a href="#1-更换主题" class="headerlink" title="1.更换主题"></a>1.更换主题</h3><p>下载主题，解压到博客目录下的<code>themes</code>目录，修改根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h3 id="2-设置文章模板"><a href="#2-设置文章模板" class="headerlink" title="2.设置文章模板"></a>2.设置文章模板</h3><p><code>Hexo</code>的页面是包括一个<code>md</code>文件和<code>ejs</code>文件结合而成的，<code>md</code>文件中的内容是页面配置，基本信息，和显示的内容。而<code>ejs</code>文件就是<code>js</code>逻辑代码了。</p><p>我们在<code>scaffolds/post.md</code>中设置文章的默认模板，这样以后创建文章的时候，这些信息就默认添加上了，不同文章你也可以修改这些信息。</p><pre class="line-numbers language-bash"><code class="language-bash">---title: <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span>date: <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token function">date</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>top: <span class="token boolean">false</span>cover: <span class="token boolean">false</span>password:toc: <span class="token boolean">true</span>mathjax: <span class="token boolean">true</span>summary:tags:categories:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-添加404页面"><a href="#3-添加404页面" class="headerlink" title="3.添加404页面"></a>3.添加404页面</h3><p>原来的主题没有404页面，所以我们自己添加一个。首先在<code>/source/</code>目录下新建一个<code>404.md</code>，内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash">---title: 404date: 2019-07-19 16:41:10type: <span class="token string">"404"</span>layout: <span class="token string">"404"</span>description: <span class="token string">"你来到了没有知识的荒原 :("</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>/themes/matery/layout/</code>目录下新建一个<code>404.ejs</code>文件，内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>    /* don<span class="token string">'t remove. */    .about-cover {        height: 75vh;    }&lt;/style>&lt;div class="bg-cover pd-header about-cover">    &lt;div class="container">        &lt;div class="row">            &lt;div class="col s10 offset-s1 m8 offset-m2 l8 offset-l2">                &lt;div class="brand">                    &lt;div class="title center-align">                        404                    &lt;/div>                    &lt;div class="description center-align">                        &lt;%= page.description %>                    &lt;/div>                &lt;/div>            &lt;/div>        &lt;/div>    &lt;/div>&lt;/div>&lt;script>    // 每天切换 banner 图.  Switch banner image every day.    $('</span>.bg-cover<span class="token string">').css('</span>background-image<span class="token string">', '</span>url<span class="token punctuation">(</span>/medias/banner/<span class="token string">' + new Date().getDay() + '</span>.jpg<span class="token punctuation">)</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-添加二级菜单"><a href="#4-添加二级菜单" class="headerlink" title="4.添加二级菜单"></a>4.添加二级菜单</h3><p>因为我使用的是最新版的主题代码，所以二级菜单可以直接在主题的配置文件<code>_config.yml</code>中配置，而不需要自己添加代码。如果你是老版本的主题，那么你可以参考上述两位大佬的博客进行添加代码。</p><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token comment" spellcheck="true"># 二级菜单写法如下</span>  Medias:    icon: fas fa-list    children:      - name: Books        url: /books        icon: fas fa-book      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Galleries        url: /galleries        icon: fas fa-image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就可以在导航栏中看见媒体的图标以及二级图标了，不过由于我们没有创建对应的页面，所以无法看见内容。这里只举例说一下<code>musics</code>页面的创建。</p><p>先使用命令创建<code>musics</code>对应的<code>md</code>文件</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"musics"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就在<code>source</code>目录下生成一个<code>musics</code>目录了，里面包含一个<code>index.md</code>就是<code>musics</code>页面的配置文件了。我们填入对应<code>layout</code>的<code>ejs</code>文件</p><pre class="line-numbers language-bash"><code class="language-bash">---title: musicsdate: 2019-11-14 23:41:25type: <span class="token string">"musics"</span>layout: <span class="token string">"musics"</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在主题的<code>layout</code>目录下创建<code>ejs</code>文件，并写入如下内容：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/bg-cover'</span><span class="token punctuation">)</span> %<span class="token operator">></span><span class="token operator">&lt;</span>main class<span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"contact"</span> class<span class="token operator">=</span><span class="token string">"container chip-container"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card-content"</span> style<span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>h3 style<span class="token operator">=</span><span class="token string">"margin: 5px 0 5px 5px;"</span><span class="token operator">></span>如果你有好的内容推荐，欢迎在下面留言！<span class="token operator">&lt;</span>/h3<span class="token operator">></span>                        <span class="token operator">&lt;</span>/div<span class="token operator">></span>                <span class="token operator">&lt;</span>/div<span class="token operator">></span>                <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.gitalk <span class="token operator">&amp;&amp;</span> theme.gitalk.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/gitalk'</span><span class="token punctuation">)</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.gitment.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/gitment'</span><span class="token punctuation">)</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.disqus.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/disqus'</span><span class="token punctuation">)</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.livere <span class="token operator">&amp;&amp;</span> theme.livere.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/livere'</span><span class="token punctuation">)</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.valine <span class="token operator">&amp;&amp;</span> theme.valine.enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>%- partial<span class="token punctuation">(</span><span class="token string">'_partial/valine'</span><span class="token punctuation">)</span> %<span class="token operator">></span>                        <span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span>                <span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/main<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样一个页面就创建好了，具体内容可自行修改，其他页面也是如此创建的。</p><blockquote><p>这里有一个bug，就是二级菜单不显示中文，解决方法请见Debug部分。</p></blockquote><h3 id="5-图片添加水印"><a href="#5-图片添加水印" class="headerlink" title="5.图片添加水印"></a>5.图片添加水印</h3><p>为了防止别人抄袭你文章，可以把所有的图片都加上水印，方法很简单。首先在博客根目录下新建一个<code>watermark.py</code>，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> glob<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageDraw<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token keyword">def</span> <span class="token function">watermark</span><span class="token punctuation">(</span>post_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> post_name <span class="token operator">==</span> <span class="token string">'all'</span><span class="token punctuation">:</span>        post_name <span class="token operator">=</span> <span class="token string">'*'</span>    dir_name <span class="token operator">=</span> <span class="token string">'source/_posts/'</span> <span class="token operator">+</span> post_name <span class="token operator">+</span> <span class="token string">'/*'</span>    <span class="token keyword">for</span> files <span class="token keyword">in</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>dir_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>files<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>im<span class="token punctuation">.</span>getbands<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>            im <span class="token operator">=</span> im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span>        font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'STSONG.TTF'</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>im<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span>im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  u<span class="token string">'@hiyoung'</span><span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>        im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        watermark<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[usage] &lt;input>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字体也放根目录下，自己找字体。然后每次写完一篇文章可以运行<code>python3 watermark.py postname</code>添加水印，如果第一次运行要给所有文章添加水印，可以运行<code>python3 watermark.py all</code>。</p><blockquote><p>这个代码的逻辑就是从文章目录下拿到图片，添加水印。这个前提是要文章的图片放在source/_posts/下，所以如果在文章中直接引用了其他地方的图片链接，那么这个脚本不会去给那个图片加水印了。</p></blockquote><h3 id="6-动态标签栏"><a href="#6-动态标签栏" class="headerlink" title="6.动态标签栏"></a>6.动态标签栏</h3><p>这个功能我没有添加，只是简单的一段代码，在<code>theme/matery/layout/layout.ejs</code>下添加如下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span> <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Σ(っ °Д °;)っ喔哟，崩溃啦！"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"φ(゜▽゜*)♪咦，又好了！"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-添加豆瓣插件"><a href="#7-添加豆瓣插件" class="headerlink" title="7.添加豆瓣插件"></a>7.添加豆瓣插件</h3><p>我的二级菜单书单和电影都是通过豆瓣插件来添加内容的。</p><p>首先安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-douban --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将下面的配置写入博客的 <code>_config.yml</code> 文件里：</p><pre class="line-numbers language-bash"><code class="language-bash">douban:  user: <span class="token comment" spellcheck="true">#填写你的豆瓣id，打开豆瓣，登入账户，然后在右上角点击 ”个人主页“，url的后面就是id。</span>  builtin: <span class="token boolean">true</span>  book:    title: <span class="token string">'我的无味书屋！'</span>    quote: <span class="token string">'沉醉于知识的hiyoung.'</span>  movie:    title: <span class="token string">'电影推荐'</span>    quote: <span class="token string">'沉醉于电影的hiyoung.'</span>  <span class="token comment" spellcheck="true">#game:　不想要的内容可注释掉</span>  <span class="token comment" spellcheck="true">#  title: 'This is my game title'</span>  <span class="token comment" spellcheck="true">#  quote: 'This is my game quote'</span>  timeout: 10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后创建对应的页面，在页面的<code>ejs</code>文件中添加如下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/bg-cover'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>    <span class="token punctuation">.</span>hexo<span class="token operator">-</span>douban<span class="token operator">-</span>picture img <span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"contact"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"container chip-container"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span> style<span class="token operator">=</span><span class="token string">"padding: 30px"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>h1 style<span class="token operator">=</span><span class="token string">"margin: 10px 0 10px 0px;"</span><span class="token operator">></span>                                        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tag-title center-align"</span><span class="token operator">></span>                                        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fas fa-book"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span> style<span class="token operator">=</span><span class="token string">"text-align: center"</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>h3 style<span class="token operator">=</span><span class="token string">"margin: 5px 0 5px 5px;"</span><span class="token operator">></span>如果你有好的内容推荐，欢迎在下面留言！<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitalk <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>gitalk<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/gitalk'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitment<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/gitment'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>disqus<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/disqus'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>livere <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>livere<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/livere'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>valine <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>valine<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_partial/valine'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你的博客文件夹内找到这个文件夹 <code>/node_modules/hexo-douban/lib</code> ，这个文件夹内找到以下三个文件： <code>books-generator.js</code> 、<code>games-generator.js</code> 、<code>movies-generator.js</code></p><p>将每个文件内最下面的：</p><pre class="line-numbers language-javascript"><code class="language-javascript">layout<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为：</p><pre class="line-numbers language-javascript"><code class="language-javascript">layout<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token string">'books'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>books</code>是对应的呈现内容的<code>ejs</code>文件名。这样我们的豆瓣内容就设置完成了，可以进行编译部署了。</p><blockquote><p>通常大家都喜欢用 <code>hexo d</code> 来作为 <code>hexo deploy</code> 命令的简化，但是当安装了 <code>hexo douban</code> 之后，就不能用 <code>hexo d</code> 了，因为 <code>hexo douban</code> 跟 <code>hexo deploy</code> 的前缀都是 <code>hexo d</code> ，你以后执行的 <code>hexo d</code> 将不再是 Hexo 页面的生成，而是豆瓣页面的生成。</p><p>这里也说一下这个插件的逻辑，该插件通过你设置的豆瓣id，去爬取豆瓣信息。将爬取到的信息返回给对应的layout，然后进行展示。</p></blockquote><h3 id="8-统一友链卡片样式"><a href="#8-统一友链卡片样式" class="headerlink" title="8.统一友链卡片样式"></a>8.统一友链卡片样式</h3><p>我不喜欢原版的友链显示，所以统一了颜色，打开<code>themes/matery/layout/friends.ejs</code>文件，找到如下代码并修改：</p><pre class="line-numbers language-javascript"><code class="language-javascript">                            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>修改frends卡片，统一样式 <span class="token operator">--</span><span class="token operator">></span>                            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card frind-card&lt;%- ((i % 10) +1) %>"</span><span class="token operator">></span> 修改前<span class="token operator">--</span><span class="token operator">></span>                            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card frind-card1"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它的样式颜色也在该文件中，各位可自行修改。</p><h3 id="9-添加交换友链卡片"><a href="#9-添加交换友链卡片" class="headerlink" title="9.添加交换友链卡片"></a>9.添加交换友链卡片</h3><p>在<code>/source/friends/index.md</code>文件中添加要交互的信息：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 友链交换</span>想要交换友链的大佬，欢迎在留言板留言，留言格式：* **名称：**Hiyoung* **地址：**https://hiyoungai.com/* **简介：**宠辱不惊，看庭前花开花落；去留无意，望天空云卷云舒。* **头像：**https://cdn.jsdelivr.net/gh/hiyoung123/cdn/img/avatar.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在<code>friends.ejs</code>文件中的如下位置添加代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card-content article-card-content"</span><span class="token operator">></span>                    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"articleContent"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">></span>                        <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> page<span class="token punctuation">.</span>content <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>gitalk <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>gitalk<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-修改各菜单首图样式"><a href="#10-修改各菜单首图样式" class="headerlink" title="10.修改各菜单首图样式"></a>10.修改各菜单首图样式</h3><p>修改各个页面的首图为本页面标题，而不是统一的网站标题。</p><p>打开<code>layout/_partial/bg-cover-content.ejs</code>文件，找到如下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>subtitle <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>subtitle<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> config<span class="token punctuation">.</span>subtitle <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                subtitle                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改为：</p><pre class="line-numbers language-javascript"><code class="language-javascript">            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"title center-align"</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>subtitle <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>subtitle<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> config<span class="token punctuation">.</span>subtitle <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    subtitle                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_archive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'archives'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'categories'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_tag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'tag'</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>title <span class="token operator">&amp;&amp;</span> page<span class="token punctuation">.</span>title<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">=</span> config<span class="token punctuation">.</span>subtitle<span class="token operator">%</span><span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-在文章中添加网易云音乐"><a href="#11-在文章中添加网易云音乐" class="headerlink" title="11.在文章中添加网易云音乐"></a>11.在文章中添加网易云音乐</h3><p>首先打开网易云网页版，找到想听的歌曲，然后点击生成外链，复制<code>html</code>代码。粘贴到文章里就行了，为了美观，设置一下居中，具体代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div align<span class="token operator">=</span><span class="token string">"middle"</span><span class="token operator">></span>这里粘贴刚刚复制的代码<span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="12-建站时间、卜算子计数、全站文字统计"><a href="#12-建站时间、卜算子计数、全站文字统计" class="headerlink" title="12.建站时间、卜算子计数、全站文字统计"></a>12.建站时间、卜算子计数、全站文字统计</h3><p>新版本中已经集成了该功能，可以直接在主题的配置文件<code>_config.yml</code>中进行配置：</p><p>首先需要安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在<code>_config.yml</code>配置：</p><pre class="line-numbers language-bash"><code class="language-bash">wordCount:  enable: <span class="token boolean">false</span> <span class="token comment" spellcheck="true"># 将这个值设置为 true 即可.</span>  postWordCount: <span class="token boolean">true</span>  min2read: <span class="token boolean">true</span>  totalCount: <span class="token boolean">true</span> <span class="token comment" spellcheck="true">#需要添加这个字段，原版没有　全站文字统计配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建站时间配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Website start time.</span><span class="token comment" spellcheck="true"># 站点运行开始时间.</span>time:  enable: <span class="token boolean">true</span>  year: 2019 <span class="token comment" spellcheck="true"># 年份</span>  month: 11 <span class="token comment" spellcheck="true"># 月份</span>  date: 12 <span class="token comment" spellcheck="true"># 日期</span>  hour: 00 <span class="token comment" spellcheck="true"># 小时</span>  minute: 00 <span class="token comment" spellcheck="true"># 分钟</span>  second: 00 <span class="token comment" spellcheck="true"># 秒</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-关于页面添加简历"><a href="#13-关于页面添加简历" class="headerlink" title="13.关于页面添加简历"></a>13.关于页面添加简历</h3><p>修改<code>/themes/matery/layout/about.ejs</code>，找到<code>&lt;div class=&quot;card&quot;&gt;</code>标签，然后找到它对应的<code>&lt;/div&gt;</code>标签，接在后面新增一个card，语句如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span> <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card-content"</span><span class="token operator">></span> <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"card-content article-card-content"</span><span class="token operator">></span> <span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"title center-align"</span> data-aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">></span> <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fa fa-address-book"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">&lt;</span>%- __<span class="token punctuation">(</span><span class="token string">'myCV'</span><span class="token punctuation">)</span> %<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"articleContent"</span> data-aos<span class="token operator">=</span><span class="token string">"fade-up"</span><span class="token operator">></span> <span class="token operator">&lt;</span>%- page.content %<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就会多出一张card，然后可以在<code>/source/about/index.md</code>下面写上你的简历了，当然这里的位置随你自己设置，你也可以把简历作为第一个card。</p><h3 id="14-添加评论插件"><a href="#14-添加评论插件" class="headerlink" title="14.添加评论插件"></a>14.添加评论插件</h3><p>主题已经自带了<code>gitalk</code>插件了，所以你只需要去<code>github</code>官网配置好就行了。</p><p>首先打开<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">github</a>申请一个应用，要填四个东西：</p><pre class="line-numbers language-bash"><code class="language-bash">Application name //应用名称，随便填 Homepage URL //填自己的博客地址 Application description //应用描述，随便填 Authorization callback URL //填自己的博客地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后点击注册，会出现两个字符串<code>Client ID</code>和<code>Client Secret</code>，这个要复制出来。</p><p>然后去主题的配置文件<code>_config.yml</code>下修改<code>gitalk</code>那里：</p><pre class="line-numbers language-bash"><code class="language-bash">gitalk: enable: <span class="token boolean">true</span>   owner: 你的github用户名    repo: 你的github用户名.github.io   oauth:     clientId: 粘贴刚刚注册完显示的字符串     clientSecret: 粘贴刚刚注册完显示的字符串   admin: 你的github用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后写文章的时候，只要在文章页面登陆过<code>github</code>，就会自动创建评论框，<strong>记得每次写完文章后打开博客文章页面一下</strong>。</p><h3 id="15-添加RSS插件"><a href="#15-添加RSS插件" class="headerlink" title="15.添加RSS插件"></a>15.添加RSS插件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<code>Hexo</code>根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-bash"><code class="language-bash">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: <span class="token string">' '</span>  order_by: -date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="16-添加搜索插件"><a href="#16-添加搜索插件" class="headerlink" title="16.添加搜索插件"></a>16.添加搜索插件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-bash"><code class="language-bash">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="17-添加代码高亮插件"><a href="#17-添加代码高亮插件" class="headerlink" title="17.添加代码高亮插件"></a>17.添加代码高亮插件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-bash"><code class="language-bash">highlight:  enable: <span class="token boolean">false</span>prism_plugin:  mode: <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  theme: <span class="token string">'tomorrow'</span>  line_number: <span class="token boolean">false</span>    <span class="token comment" spellcheck="true"># default false</span>  custom_css:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="18-修改打赏功能"><a href="#18-修改打赏功能" class="headerlink" title="18.修改打赏功能"></a>18.修改打赏功能</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="19-修改页脚"><a href="#19-修改页脚" class="headerlink" title="19.修改页脚"></a>19.修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="20-修改社交链接"><a href="#20-修改社交链接" class="headerlink" title="20.修改社交链接"></a>20.修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>% <span class="token keyword">if</span> <span class="token punctuation">(</span>theme.socialLink.github<span class="token punctuation">)</span> <span class="token punctuation">{</span> %<span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.github %>"</span> class<span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data-tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data-position<span class="token operator">=</span><span class="token string">"top"</span> data-delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i class<span class="token operator">=</span><span class="token string">"fab fa-github"</span><span class="token operator">></span><span class="token operator">&lt;</span>/i<span class="token operator">></span>    <span class="token operator">&lt;</span>/a<span class="token operator">></span><span class="token operator">&lt;</span>% <span class="token punctuation">}</span> %<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><h3 id="21-添加聊天功能"><a href="#21-添加聊天功能" class="headerlink" title="21.添加聊天功能"></a>21.添加聊天功能</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h2 id="第四部分：优化"><a href="#第四部分：优化" class="headerlink" title="第四部分：优化"></a>第四部分：优化</h2><h3 id="1-URL优化"><a href="#1-URL优化" class="headerlink" title="1.URL优化"></a>1.URL优化</h3><p>使用插件优化<code>url</code>，插件<code>hexo-abbrlink</code>实现了这个功能，它将原来的<code>URL</code>地址重新进行了进制转换和再编码。</p><p>安装<code>hexo-abbrlink</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置博客根目录下的<code>_config.yml</code>文件。</p><h3 id="2-CDN优化"><a href="#2-CDN优化" class="headerlink" title="2.CDN优化"></a>2.CDN优化</h3><p>用法：</p><pre class="line-numbers language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如本文的图片：</p><pre class="line-numbers language-bash"><code class="language-bash">https://cdn.jsdelivr.net/gh/hiyoung123/CDN/img/img_hexo_github_new_rep.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-压缩代码"><a href="#3-压缩代码" class="headerlink" title="3.压缩代码"></a>3.压缩代码</h3><p>首先安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在根目录配置文件 <code>_config.yml</code> 末尾加入以下配置：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span>neat_enable: <span class="token boolean">true</span>neat_html:  enable: <span class="token boolean">true</span>  exclude:    - <span class="token string">'**/*.md'</span>neat_css:  enable: <span class="token boolean">true</span>  exclude:    - <span class="token string">'**/*.min.css'</span>neat_js:  enable: <span class="token boolean">true</span>  mangle: <span class="token boolean">true</span>  output:  compress:  exclude:    - <span class="token string">'**/*.min.js'</span>    - <span class="token string">'**/**/instantpage.js'</span>    - <span class="token string">'**/matery.js'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-双部署到Coding"><a href="#4-双部署到Coding" class="headerlink" title="4.双部署到Coding"></a>4.双部署到Coding</h3><p><code>Github</code> &amp; <code>Coding Pages</code> 双部署,对国内,国外用户进行分流访问,以提升网站的访问速度.<br><code>Github Pages</code> 的部署前面已经说了,这里就讲一讲 <code>Coding Pages</code> 如何部署.其实与 <code>Github Pages</code> 也类似,先到<code>coding</code>官网注册,创建一个与用户名同名的仓库,添加仓库地址到配置文件中,在根目录<code>_config.yml</code>对应地方添加如下:</p><pre class="line-numbers language-bash"><code class="language-bash">deploy:  - type: <span class="token function">git</span>    repo:      github: https://github.com/hiyoung123/hiyoung123.github.io      coding: https://e.coding.net/hiyoung123/hiyoung123.coding.me.git    branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-图片懒加载"><a href="#5-图片懒加载" class="headerlink" title="5.图片懒加载"></a>5.图片懒加载</h3><p>安装插件：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在根目录配置文件末尾加入以下代码</p><pre class="line-numbers language-bash"><code class="language-bash">lazyload:  enable: <span class="token boolean">true</span>   onlypost: <span class="token boolean">false</span>  <span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>  loadingImg: <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是一般情况下懒加载和gallery插件会发生冲突，结果可能就是点开图片，左翻右翻都是loading image。<code>matery</code>主题的解决方案是：修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code>文件</p><p>在第108行加上：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>做完这步之后，还有点小Bug，首页的logo点击会直接打开logo图，而不是跳到首页。</p><p>伪解决方案：打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p><p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"brand-logo"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%- url_for() %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"waves-effect waves-light"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>logo <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span> theme<span class="token punctuation">.</span>logo<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"&lt;%= theme.logo %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo-img"</span> alt<span class="token operator">=</span><span class="token string">"LOGO"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span>            <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"logo-span"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> config<span class="token punctuation">.</span>title <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实第一次加载后本地都是有缓存的，如果每次都把loading显示出来就不那么好看。所以我们需要对插件进行魔改，让图片稍微提前加载，避开加载动画。</p><p>打开 <code>Hexo根目录</code>&gt;<code>node_modules</code> &gt; <code>hexo-lazyload-image</code> &gt; <code>lib</code> &gt; <code>simple-lazyload.js</code> 文件第9行修改为：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&amp;&amp;</span> rect<span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">+</span><span class="token number">240</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span><span class="token number">240</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>作用：提前240个像素加载图片；当然这个值也可以根据自己情况修改。</p><h2 id="第五部分：Debug"><a href="#第五部分：Debug" class="headerlink" title="第五部分：Debug"></a>第五部分：Debug</h2><h3 id="1-解决部分菜单页面，标签栏不显示中文标题"><a href="#1-解决部分菜单页面，标签栏不显示中文标题" class="headerlink" title="1.解决部分菜单页面，标签栏不显示中文标题"></a>1.解决部分菜单页面，标签栏不显示中文标题</h3><p>首先需要去<code>/themes/matery/languages/</code>下，修改<code>default.yml</code>和<code>zh-CN.yml</code>添加对应的文字信息。</p><p>接着在<code>mobile-nav.ejs</code>和<code>navigation.ejs</code>中添加如下代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript">        menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Medias"</span><span class="token punctuation">,</span> <span class="token string">"媒体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Books"</span><span class="token punctuation">,</span> <span class="token string">"书单"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Musics"</span><span class="token punctuation">,</span> <span class="token string">"音乐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Videos"</span><span class="token punctuation">,</span> <span class="token string">"视频"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        menuMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Galleries"</span><span class="token punctuation">,</span> <span class="token string">"相册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到下面的代码：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>language <span class="token operator">===</span> <span class="token string">'zh-CN'</span> <span class="token operator">&amp;&amp;</span> menuMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> menuMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>childrenLink<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">:</span> childrenLink<span class="token punctuation">.</span>name <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并在<code>head.ejs</code>文件中修改：</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> title <span class="token operator">=</span> page<span class="token punctuation">.</span>title<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// tags, categories, about pages title</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">==</span> <span class="token string">'tags'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'tags'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">==</span> <span class="token string">'categories'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'categories'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">==</span> <span class="token string">'about'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'about'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">==</span> <span class="token string">'contact'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'contact'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">==</span> <span class="token string">'friends'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'friends'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">==</span> <span class="token string">'musics'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'musics'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>title <span class="token operator">==</span> <span class="token string">'galleries'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        title <span class="token operator">=</span> <span class="token function">__</span><span class="token punctuation">(</span><span class="token string">'galleries'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-部署在coding中，使用www-访问域名时，出现404．"><a href="#2-部署在coding中，使用www-访问域名时，出现404．" class="headerlink" title="2.部署在coding中，使用www.访问域名时，出现404．"></a>2.部署在coding中，使用www.访问域名时，出现404．</h3><p>需要在coding部署设置中，绑定一下<code>www</code>的域名，同时需要申请证书。</p><h3 id="3-在coding中认证失败"><a href="#3-在coding中认证失败" class="headerlink" title="3.在coding中认证失败"></a>3.在coding中认证失败</h3><p>如果申请失败的话，在域名解析处将境外的解析记录关掉，然后再去申请。申请成功后再打开境外的记录。</p><h3 id="4-使用neat插件压缩代码，导致鼠标点击特效消失"><a href="#4-使用neat插件压缩代码，导致鼠标点击特效消失" class="headerlink" title="4.使用neat插件压缩代码，导致鼠标点击特效消失"></a>4.使用neat插件压缩代码，导致鼠标点击特效消失</h3><p>在压缩代码插件配置中修改为如下代码：</p><pre class="line-numbers language-bash"><code class="language-bash">neat_js:  enable: <span class="token boolean">true</span>  mangle: <span class="token boolean">true</span>  output:  compress:  exclude:    - <span class="token string">'**/*.min.js'</span>    - <span class="token string">'**/**/instantpage.js'</span>    - <span class="token string">'**/matery.js'</span>    - <span class="token string">'**/clicklove.js'</span>  <span class="token comment" spellcheck="true">#防止影响点击特效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.卜算子区分www和不带www的域名，导致访问数无法同步。</p><p>卜算子按照域名进行统计，带www和不带www的属于两个域名。可能需要重定向解决。</p><p>使用cloudflare貌似可以做到域名重定向。</p><h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><p>再次感谢下面几位大佬的博客：</p><p><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">闪烁之狐的原版定制</a> | <a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">Godweiyang</a> | <a href="https://sunhwee.com/posts/6e8839eb.html" target="_blank" rel="noopener">洪卫</a> | <a href="https://blog.sky03.cn/2019/42790.html" target="_blank" rel="noopener">Sky03</a></p>]]></content>
      
      
      <categories>
          
          <category> 网站搭建与优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
